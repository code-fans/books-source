//printf函数使用示例
#include <bits/stdc++.h>
using namespace std;

int main()
{
  //输出整数,即输出a=123
  printf("a=%d\n",123);
  //输出整数宽度为5,默认右靠齐,即输出a=  123
  printf("a=%5d\n",123);
  //输出整数宽度为5,负号表示左靠齐,即输出1    ,2
  printf("%-5d,%d\n",1,2);
  long long x=1234567890000;
  //输出long long类型的数据,即输出1234567890000
  printf("%lld\n",x);

  float y=123.456;
  //输出单精度浮点数,即输出y=123.456001,注意此处有误差
  printf("y=%f\n",y);
  //输出数据宽度为12,默认右靠齐,即输出y=  123.456001
  printf("y=%12f\n",y);
  //输出数据宽度为12,负号表示左靠齐,即输出y=123.456001  ,OK
  printf("y=%-12f,OK\n",y);
  //输出总宽为10,小数部分取2位,即输出y=    123.46,注意有误差
  printf("y=%10.2f\n",y);
  //输出总宽为1(过小无效),小数取2位,即输出123.46,注意有误差
  printf("%1.2f\n",y);

  double z=45.67;
  //输出双精度浮点数,即输出45.670000
  printf("%lf\n",z);
  //输出数据宽度为12,默认右靠齐,即输出z=   45.670000
  printf("z=%12lf\n",z);
  //输出数据宽度为12,负号表示左靠齐,即输出z=45.670000   ,OK
  printf("z=%-12lf,OK\n",z);
  //输出数据宽为10,小数部分宽为2,即输出z=     45.67
  printf("z=%10.2lf\n",z);
  //输出数据宽为0(过小无效),小数部分宽为2,即输出z=45.67
  printf("z=%0.2lf\n",z);

  char c='x';
  //输出单个字符
  printf("%c\n",c);
  //输出字符串,即输出s=abc
  printf("s=%s\n", "abc");
  //表示输出字符串宽度为8,右靠齐,所以输出s=     abc
  printf("s=%8s\n","abc");
  //表示输出字符串宽度为8,左靠齐,所以输出a      ,b
  printf("%-8s,%s\n","a","b");
  //字符串长度大于2,宽度限制无效,输出s=abc
  printf("s=%2s\n","abc");
  //宽度为10,只取左端4个字符,默认右靠齐,输出      abcd
  printf("%10.4s\n","abcdef");
  //宽度为8,取左端3个字符,负号左靠齐,输出abc     ,OK
  printf("%-8.3s,OK\n","abcde");
  return 0;
}



















